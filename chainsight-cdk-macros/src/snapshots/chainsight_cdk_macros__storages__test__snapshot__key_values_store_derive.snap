---
source: chainsight-cdk-macros/src/storages.rs
expression: formatted
---
#[ic_cdk::query]
#[candid::candid_method(query)]
fn get_account(id: String) -> Vec<Account> {
    _get_account(id)
}
fn _get_account(id: String) -> Vec<Account> {
    Account::get(id.as_str())
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn proxy_get_account(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<String, Vec<Account>>::new(proxy(), _get_account)
        .reply(input)
        .await
}
#[ic_cdk::query]
#[candid::candid_method(query)]
fn between_account(a: (String, String)) -> HashMap<String, Vec<Account>> {
    _between_account(a)
}
fn _between_account(a: (String, String)) -> HashMap<String, Vec<Account>> {
    Account::between(a.0.as_str(), a.1.as_str())
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn proxy_between_account(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<(String, String), HashMap<String, Vec<Account>>>::new(
        proxy(),
        _between_account,
    )
    .reply(input)
    .await
}
#[ic_cdk::query]
#[candid::candid_method(query)]
fn last_account(n: u64) -> HashMap<String, Vec<Account>> {
    _last_account(n)
}
fn _last_account(n: u64) -> HashMap<String, Vec<Account>> {
    Account::last(n)
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn proxy_last_account(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<u64, HashMap<String, Vec<Account>>>::new(
        proxy(),
        _last_account,
    )
    .reply(input)
    .await
}
impl Account {
    pub fn get(id: &str) -> Vec<Self> {
        Self::get_store().get(id)
    }
    pub fn put(id: &str, e: Vec<Self>) {
        Self::get_store().set(id, e)
    }
    pub fn between(from: &str, to: &str) -> HashMap<String, Vec<Self>> {
        Self::get_store().between(from, to)
    }
    pub fn last(n: u64) -> HashMap<String, Vec<Self>> {
        Self::get_store().last_elems(n)
    }
    fn get_store() -> chainsight_cdk::storage::KeyValuesStore {
        chainsight_cdk::storage::KeyValuesStore::new(1u8)
    }
}

