---
source: chainsight-cdk-macros/src/functions.rs
expression: formatted
---
thread_local! { static INDEXING_INTERVAL : std :: cell :: RefCell < u32 > = std :: cell :: RefCell :: new (0) ; }
fn get_indexing_interval() -> u32 {
    INDEXING_INTERVAL.with(|f| f.borrow().clone())
}
fn set_indexing_interval(interval: u32) {
    INDEXING_INTERVAL.with(|f| *f.borrow_mut() = interval);
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn set_task(task_interval_secs: u32, delay_secs: u32) {
    set_indexing_interval(task_interval_secs);
    let res = ic_cdk::api::call::call::<(u32, u32, String, Vec<u8>), ()>(
        proxy(),
        "start_indexing",
        (
            task_interval_secs,
            delay_secs,
            "HELLO".to_string(),
            Vec::<u8>::new(),
        ),
    )
    .await;
    match res {
        Ok(_) => {}
        Err(e) => {
            panic!("Failed to start indexing: {:?}", e)
        }
    };
}

