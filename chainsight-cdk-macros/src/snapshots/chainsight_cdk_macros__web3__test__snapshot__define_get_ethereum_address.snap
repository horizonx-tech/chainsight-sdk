---
source: chainsight-cdk-macros/src/web3.rs
expression: formatted
---
fn default_derivation_key() -> Vec<u8> {
    ic_cdk::id().as_slice().to_vec()
}
async fn public_key(key_name: String) -> Result<Vec<u8>, String> {
    ic_web3_rs::ic::get_public_key(None, vec![default_derivation_key()], key_name).await
}
async fn ethereum_address(key_name: String) -> Result<Address, String> {
    let pub_key = public_key(key_name).await?;
    ic_web3_rs::ic::pubkey_to_address(&pub_key)
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn get_ethereum_address() -> String {
    match ethereum_address(get_env().ecdsa_key_name()).await {
        Ok(v) => format!("0x{}", hex::encode(v)),
        Err(msg) => msg,
    }
}

