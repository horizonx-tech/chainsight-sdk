---
source: chainsight-cdk-macros/src/functions.rs
expression: formatted
---
use chainsight_cdk::initializer::{CycleManagements, Initializer};
use ic_cdk::api::management_canister::{
    main::{update_settings, UpdateSettingsArgument},
    provisional::{CanisterIdRecord, CanisterSettings},
};
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn init_in(
    env: chainsight_cdk::core::Env,
    cycles: CycleManagements,
) -> Result<(), chainsight_cdk::initializer::InitError> {
    assert!(!INITIALIZED.with(|f| *f.borrow()), "Already initialized");
    let initializer = chainsight_cdk::initializer::ChainsightInitializer::new(
        chainsight_cdk::initializer::InitConfig { env: env.clone() },
    );
    let deployer = ic_cdk::caller();
    let init_result = initializer.initialize(&deployer, &cycles).await?;
    let proxy = init_result.proxy;
    INITIALIZED.with(|f| *f.borrow_mut() = true);
    PROXY.with(|f| *f.borrow_mut() = proxy);
    ENV.with(|f| *f.borrow_mut() = env);
    Ok(())
}
fn proxy() -> candid::Principal {
    PROXY.with(|proxy| proxy.borrow().clone())
}
fn get_env() -> chainsight_cdk::core::Env {
    ENV.with(|env| env.borrow().clone())
}
#[ic_cdk::update]
#[candid::candid_method(update)]
fn get_proxy() -> candid::Principal {
    proxy()
}
thread_local! { static INITIALIZED : std :: cell :: RefCell < bool > = std :: cell :: RefCell :: new (false) ; static PROXY : std :: cell :: RefCell < candid :: Principal > = std :: cell :: RefCell :: new (candid :: Principal :: anonymous ()) ; static ENV : std :: cell :: RefCell < chainsight_cdk :: core :: Env > = std :: cell :: RefCell :: new (chainsight_cdk :: core :: Env :: default ()) ; }

