---
source: chainsight-cdk-macros/src/utils.rs
expression: formatted
---
use chainsight_cdk::log::{Logger, LoggerImpl, TailCursor, TailResponse};
#[candid::candid_method(query)]
#[ic_cdk::query]
fn tail_logs(rows: usize, cursor: Option<TailCursor>) -> TailResponse {
    _logger().tail(rows, cursor)
}
#[candid::candid_method(update)]
#[ic_cdk::update]
#[chainsight_cdk_macros::only_controller]
fn drain_logs(rows: usize) -> Vec<String> {
    _logger().drain(rows)
}
fn schedule_cleanup() {
    ic_cdk_timers::set_timer_interval(std::time::Duration::from_secs(86400u64), || {
        ic_cdk::spawn(async {
            _logger().sweep(7u8);
        })
    });
    _logger().info(
        format!(
            "cleanup sheduled: interval = {} sec. retention days = {}",
            86400u64, 7u8
        )
        .as_str(),
    );
}
fn _init_logger() {
    schedule_cleanup();
}
fn _post_upgrade_logger() {
    schedule_cleanup();
}
fn _logger() -> LoggerImpl {
    LoggerImpl::new(Some("Logger"))
}
#[ic_cdk::init]
fn init() {
    _init_logger();
}
#[ic_cdk::post_upgrade]
fn post_upgrade() {
    _post_upgrade_logger();
}
