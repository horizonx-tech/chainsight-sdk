---
source: chainsight-cdk-macros/src/web3.rs
expression: formatted
---
#[ic_cdk::update]
#[candid::candid_method(update)]
#[chainsight_cdk_macros::only_controller]
async fn withdraw_balance(
    to_address_str: String,
    amount_str: Option<String>,
) -> Result<String, String> {
    use ic_cdk::api::management_canister::http_request::{TransformContext, TransformFunc};
    use ic_web3_rs::{
        api::{Accounts, Eth},
        ic::KeyInfo,
        transports::{ic_http::CallOptionsBuilder, ICHttp},
        types::{Address, CallRequest, TransactionParameters, U256},
    };
    let w3_ctx_param = get_web3_ctx_param();
    let from_address_str = get_ethereum_address().await;
    let from_address = Address::from_str(&from_address_str)
        .map_err(|e| format!("Failed to parse from_address: {:?}", e))?;
    let to_address = Address::from_str(&to_address_str)
        .map_err(|e| format!("Failed to parse to_address: {:?}", e))?;
    let transport = ICHttp::new(&w3_ctx_param.url, None)
        .map_err(|e| format!("Failed to create transport: {:?}", e))?;
    let eth = Eth::new(transport.clone());
    let from_address_balance = eth
        .balance(from_address, None, Default::default())
        .await
        .map_err(|e| format!("Failed to get balance: {:?}", e))?;
    if from_address_balance.is_zero() {
        return Err("No balance to withdraw".to_string());
    }
    let nonce = eth
        .transaction_count(from_address, None, Default::default())
        .await
        .map_err(|e| format!("Failed to get nonce: {:?}", e))?;
    let gas = eth
        .estimate_gas(
            CallRequest {
                from: Some(from_address),
                to: Some(to_address),
                value: Some(from_address_balance),
                ..Default::default()
            },
            None,
            Default::default(),
        )
        .await
        .map_err(|e| format!("Failed to estimate gas: {:?}", e))?;
    let gas_price = eth
        .gas_price(Default::default())
        .await
        .map_err(|e| format!("Failed to get gas price: {:?}", e))?;
    let gas_cost = gas
        .checked_mul(gas_price)
        .ok_or("Overflow occurred during gas cost calculation")?;
    let amount = if let Some(amount_str) = amount_str {
        let parsed_amount = U256::from_dec_str(&amount_str)
            .map_err(|e| format!("Failed to parse amount: {:?}", e))?;
        if from_address_balance < parsed_amount + gas_cost {
            return Err(format!(
                "Insufficient funds: balance {:?}, amount {:?}, gas_cost {:?}",
                from_address_balance, parsed_amount, gas_cost
            ));
        }
        parsed_amount
    } else {
        from_address_balance
            .checked_sub(gas_cost)
            .ok_or("Overflow occurred during amount calculation")?
    };
    let tx_params = TransactionParameters {
        nonce: Some(nonce),
        to: Some(to_address),
        gas,
        gas_price: Some(gas_price),
        value: amount,
        chain_id: Some(w3_ctx_param.chain_id),
        ..Default::default()
    };
    ic_cdk::println!("withdraw_balance with: {:?}", tx_params);
    let derivation_path = vec![ic_cdk::id().as_slice().to_vec()];
    let key_info = KeyInfo {
        derivation_path,
        key_name: w3_ctx_param.env.ecdsa_key_name(),
        ecdsa_sign_cycles: None,
    };
    let accounts = Accounts::new(transport);
    let signed_tx = accounts
        .sign_transaction(
            tx_params,
            from_address_str.clone(),
            key_info,
            w3_ctx_param.chain_id,
        )
        .await
        .map_err(|e| format!("Failed to sign transaction: {:?}", e))?;
    let call_options = CallOptionsBuilder::default()
        .transform(Some(TransformContext {
            function: TransformFunc(Func {
                principal: ic_cdk::id(),
                method: "transform_ignore_rpc_response".to_string(),
            }),
            context: vec![],
        }))
        .max_resp(None)
        .cycles(None)
        .build()
        .unwrap();
    eth.send_raw_transaction(signed_tx.raw_transaction, call_options)
        .await
        .map_err(|e| format!("Failed to send raw transaction: {:?}", e))?;
    let tx_hash = signed_tx.transaction_hash;
    let tx_hash = format!("0x{}", hex::encode(tx_hash.as_bytes()));
    Ok(tx_hash)
}
