---
source: chainsight-cdk-macros/src/functions.rs
expression: formatted
---
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn get_result(targets: Vec<String>, input: CalculateArgs) -> LensValue {
    if targets.len() != 10usize {
        panic!("Expected {} targets", 10usize);
    }
    _calc((targets, input)).await
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn proxy_get_result(input: Vec<u8>) -> Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    let reciever_provider = chainsight_cdk::rpc::AsyncReceiverProvider::<
        (Vec<String>, CalculateArgs),
        LensValue,
    >::new(proxy(), _calc);
    reciever_provider.reply(input).await
}
#[ic_cdk::query]
#[candid::candid_method(query)]
fn get_sources() -> Vec<chainsight_cdk::core::Sources<std::collections::HashMap<String, String>>> {
    vec![]
}
fn _calc(args: (Vec<String>, CalculateArgs)) -> BoxFuture<'static, LensValue> {
    async move { calculate(args.0, args.1).await }.boxed()
}

