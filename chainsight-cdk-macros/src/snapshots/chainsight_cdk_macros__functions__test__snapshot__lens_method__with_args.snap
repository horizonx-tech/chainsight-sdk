---
source: chainsight-cdk-macros/src/functions.rs
expression: formatted
---
#[derive(Clone, Debug, Default, candid :: CandidType, serde :: Deserialize, serde :: Serialize)]
pub struct LensArgs {
    pub targets: Vec<String>,
    pub args: CalculateArgs,
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn get_result(input: LensArgs) -> LensValue {
    if input.targets.len() != 10usize {
        panic!("Expected {} targets", 10usize);
    }
    _calc(input).await
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn proxy_get_result(input: Vec<u8>) -> Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    let reciever_provider =
        chainsight_cdk::rpc::AsyncReceiverProvider::<LensArgs, LensValue>::new(proxy(), _calc);
    reciever_provider.reply(input).await
}
#[ic_cdk::query]
#[candid::candid_method(query)]
fn get_sources() -> Vec<chainsight_cdk::core::Sources<std::collections::HashMap<String, String>>> {
    vec![]
}
fn _calc(input: LensArgs) -> BoxFuture<'static, LensValue> {
    async move { calculate(input.targets, input.args).await }.boxed()
}

