---
source: chainsight-cdk-macros/src/indexers/mod.rs
expression: formatted
---
manage_single_state!("config", IndexingConfig, false);
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn events_from_to(from: u64, to: u64) -> HashMap<u64, Vec<Transfer>> {
    _events_from_to((from, to))
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_events_from_to(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    _proxy_events_from_to(input).await
}
async fn _proxy_events_from_to(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<(u64, u64), HashMap<u64, Vec<Transfer>>>::new(
        proxy(),
        _events_from_to,
    )
    .reply(input)
    .await
}
fn _events_from_to(input: (u64, u64)) -> HashMap<u64, Vec<Transfer>> {
    indexer().between(input.0, input.1).unwrap()
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn events_latest_n(n: u64) -> HashMap<u64, Vec<Transfer>> {
    _events_latest_n(n)
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_events_latest_n(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<u64, HashMap<u64, Vec<Transfer>>>::new(
        proxy(),
        _events_latest_n,
    )
    .reply(input)
    .await
}
fn _events_latest_n(n: u64) -> HashMap<u64, Vec<Transfer>> {
    let last_indexed = indexer().get_last_indexed().unwrap();
    _events_from_to((last_indexed - n, last_indexed))
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_last_indexed() -> u64 {
    _get_last_indexed()
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_last_indexed(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProviderWithoutArgs::<u64>::new(proxy(), _get_last_indexed)
        .reply(input)
        .await
}
fn _get_last_indexed() -> u64 {
    indexer().get_last_indexed().unwrap()
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn proxy_call(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    _proxy_events_from_to(input).await
}
fn indexer() -> chainsight_cdk::web3::Web3Indexer<Transfer> {
    chainsight_cdk::web3::Web3Indexer::new(get_logs, None)
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn index() {
    if ic_cdk::caller() != proxy() {
        panic!("Not permitted")
    }
    indexer().index(get_config()).await.unwrap();
}

