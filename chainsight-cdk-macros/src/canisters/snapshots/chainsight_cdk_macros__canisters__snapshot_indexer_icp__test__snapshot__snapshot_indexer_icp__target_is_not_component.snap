---
source: chainsight-cdk-macros/src/canisters/snapshot_indexer_icp.rs
expression: formatted
---
use candid::{Decode, Encode};
use chainsight_cdk::rpc::{CallProvider, Caller, Message};
use chainsight_cdk_macros::{
    chainsight_common, did_export, init_in, manage_single_state, prepare_stable_structure,
    setup_func, snapshot_indexer_icp_source, stable_memory_for_scalar, stable_memory_for_vec,
    timer_task_func, CborSerde, StableMemoryStorable,
};
use ic_stable_structures::writer::Writer;
mod types;
did_export!("sample_snapshot_indexer_icp");
init_in!(2);
chainsight_common!();
stable_memory_for_scalar!("target_canister", String, 3, false);
setup_func ! ({ target_canister : String , } , 5);
prepare_stable_structure!();
stable_memory_for_vec!("snapshot", Snapshot, 1, true);
timer_task_func!("set_task", "index", 6);
#[derive(
    Clone,
    Debug,
    candid :: CandidType,
    candid :: Deserialize,
    serde :: Serialize,
    StableMemoryStorable,
)]
pub struct Snapshot {
    pub value: SnapshotValue,
    pub timestamp: u64,
}
pub type SnapshotValue = types::ResponseType;
fn _get_last_snapshot_value() -> SnapshotValue {
    get_last_snapshot().value
}
fn _get_top_snapshot_values(n: u64) -> Vec<SnapshotValue> {
    get_top_snapshots(n)
        .iter()
        .map(|s| s.value.clone())
        .collect()
}
fn _get_snapshot_value(idx: u64) -> SnapshotValue {
    get_snapshot(idx).value
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_last_snapshot_value() -> SnapshotValue {
    _get_last_snapshot_value()
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_top_snapshot_values(n: u64) -> Vec<SnapshotValue> {
    _get_top_snapshot_values(n)
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_snapshot_value(idx: u64) -> SnapshotValue {
    _get_snapshot_value(idx)
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_last_snapshot_value(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProviderWithoutArgs::<SnapshotValue>::new(
        proxy(),
        _get_last_snapshot_value,
    )
    .reply(input)
    .await
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_top_snapshot_values(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<u64, Vec<SnapshotValue>>::new(
        proxy(),
        _get_top_snapshot_values,
    )
    .reply(input)
    .await
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_snapshot_value(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<u64, SnapshotValue>::new(proxy(), _get_snapshot_value)
        .reply(input)
        .await
}
snapshot_indexer_icp_source!("icrc1_total_supply");
type CallCanisterArgs = sample_snapshot_indexer_icp::CallCanisterArgs;
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn call_args() -> CallCanisterArgs {
    sample_snapshot_indexer_icp::call_args()
}
type CallCanisterResponse = SnapshotValue;
async fn call_target_method_to_target_canister(
    target: candid::Principal,
    call_args: CallCanisterArgs,
) -> SnapshotValue {
    let out: ic_cdk::api::call::CallResult<(SnapshotValue,)> =
        ic_cdk::api::call::call(target, "icrc1_total_supply", call_args).await;
    out.expect("failed to call").0
}
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn index() {
    if ic_cdk::caller() != proxy() {
        panic!("Not permitted")
    }
    let current_ts_sec = ic_cdk::api::time() / 1000000;
    let target_canister =
        candid::Principal::from_text(get_target_canister()).expect("invalid principal");
    let value = call_target_method_to_target_canister(target_canister, call_args()).await;
    let datum = Snapshot {
        value: value.clone(),
        timestamp: current_ts_sec,
    };
    add_snapshot(datum.clone());
    ic_cdk::println!("timestamp={}, value={:?}", datum.timestamp, datum.value);
}

