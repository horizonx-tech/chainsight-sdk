---
source: chainsight-cdk-macros/src/canisters/algorithm_indexer.rs
expression: formatted
---
use candid::{CandidType, Decode, Encode};
use chainsight_cdk::indexer::IndexingConfig;
use chainsight_cdk_macros::{
    algorithm_indexer, algorithm_indexer_source, chainsight_common, did_export, init_in,
    manage_single_state, prepare_stable_structure, setup_func, timer_task_func, CborSerde,
    StableMemoryStorable,
};
use ic_stable_structures::writer::Writer;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
did_export!("example_canister");
chainsight_common!();
init_in!();
prepare_stable_structure!();
manage_single_state!("target_addr", String, false);
setup_func ! ({ target_addr : String , config : IndexingConfig });
timer_task_func!("set_task", "index");
use example_canister::*;
algorithm_indexer_source!();
algorithm_indexer ! (HashMap < u64 , Vec < String >> , "get_list");
#[derive(
    Clone,
    Debug,
    PartialEq,
    candid :: CandidType,
    serde :: Serialize,
    serde :: Deserialize,
    CborSerde,
)]
pub struct UpgradeStableState {
    pub initializing_state: InitializingState,
    pub target_addr: String,
    pub config: IndexingConfig,
    pub indexing_interval: u32,
}
#[ic_cdk::pre_upgrade]
fn pre_upgrade() {
    ic_cdk::println!("start: pre_upgrade");
    let state = UpgradeStableState {
        initializing_state: get_initializing_state(),
        target_addr: get_target_addr(),
        config: get_config(),
        indexing_interval: get_indexing_interval(),
    };
    let state_bytes = state.to_cbor();
    let len = state_bytes.len() as u32;
    let mut memory = get_upgrades_memory();
    let mut writer = Writer::new(&mut memory, 0);
    writer.write(&len.to_le_bytes()).unwrap();
    writer.write(&state_bytes).unwrap();
    ic_cdk::println!("finish: pre_upgrade");
}
#[ic_cdk::post_upgrade]
fn post_upgrade() {
    ic_cdk::println!("start: post_upgrade");
    let memory = get_upgrades_memory();
    let mut state_len_bytes = [0; 4];
    memory.read(0, &mut state_len_bytes);
    let state_len = u32::from_le_bytes(state_len_bytes) as usize;
    let mut state_bytes = vec![0; state_len];
    memory.read(4, &mut state_bytes);
    let state = UpgradeStableState::from_cbor(&state_bytes);
    set_initializing_state(state.initializing_state);
    setup(state.target_addr, state.config).expect("Failed to `setup` in post_upgrade");
    set_indexing_interval(state.indexing_interval);
    ic_cdk::println!("finish: post_upgrade");
}

