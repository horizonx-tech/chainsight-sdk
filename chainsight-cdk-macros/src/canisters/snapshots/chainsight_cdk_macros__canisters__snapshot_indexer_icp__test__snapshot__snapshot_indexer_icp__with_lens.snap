---
source: chainsight-cdk-macros/src/canisters/snapshot_indexer_icp.rs
expression: formatted
---
use candid::{Decode, Encode};
use chainsight_cdk::rpc::{CallProvider, Caller, Message};
use chainsight_cdk_macros::{
    chainsight_common, did_export, init_in, manage_single_state, prepare_stable_structure,
    setup_func, snapshot_indexer_icp_source, stable_memory_for_vec, timer_task_func, CborSerde,
    StableMemoryStorable,
};
use ic_stable_structures::writer::Writer;
mod types;
did_export!("sample_snapshot_indexer_icp");
init_in!();
chainsight_common!();
manage_single_state!("target_canister", String, false);
setup_func ! ({ target_canister : String , lens_targets : Vec < String > });
prepare_stable_structure!();
stable_memory_for_vec!("snapshot", Snapshot, 1, true);
timer_task_func!("set_task", "index");
#[derive(
    Clone,
    Debug,
    candid :: CandidType,
    candid :: Deserialize,
    serde :: Serialize,
    StableMemoryStorable,
)]
#[stable_mem_storable_opts(max_size = 10000, is_fixed_size = false)]
pub struct Snapshot {
    pub value: SnapshotValue,
    pub timestamp: u64,
}
pub type SnapshotValue = types::ResponseType;
fn _get_last_snapshot_value() -> SnapshotValue {
    get_last_snapshot().value
}
fn _get_top_snapshot_values(n: u64) -> Vec<SnapshotValue> {
    get_top_snapshots(n)
        .iter()
        .map(|s| s.value.clone())
        .collect()
}
fn _get_snapshot_value(idx: u64) -> SnapshotValue {
    get_snapshot(idx).value
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_last_snapshot_value() -> SnapshotValue {
    _get_last_snapshot_value()
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_top_snapshot_values(n: u64) -> Vec<SnapshotValue> {
    _get_top_snapshot_values(n)
}
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn get_snapshot_value(idx: u64) -> SnapshotValue {
    _get_snapshot_value(idx)
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_last_snapshot_value(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProviderWithoutArgs::<SnapshotValue>::new(
        proxy(),
        _get_last_snapshot_value,
    )
    .reply(input)
    .await
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_top_snapshot_values(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<u64, Vec<SnapshotValue>>::new(
        proxy(),
        _get_top_snapshot_values,
    )
    .reply(input)
    .await
}
#[ic_cdk::update]
#[candid::candid_method(update)]
pub async fn proxy_get_snapshot_value(input: std::vec::Vec<u8>) -> std::vec::Vec<u8> {
    use chainsight_cdk::rpc::Receiver;
    chainsight_cdk::rpc::ReceiverProvider::<u64, SnapshotValue>::new(proxy(), _get_snapshot_value)
        .reply(input)
        .await
}
snapshot_indexer_icp_source!("proxy_get_last_snapshot", "get_lens_targets");
manage_single_state!("lens_targets", Vec<String>, false);
type CallCanisterArgs = Vec<String>;
#[ic_cdk::query]
#[candid::candid_method(query)]
pub fn call_args() -> CallCanisterArgs {
    get_lens_targets()
}
type CallCanisterResponse = SnapshotValue;
#[ic_cdk::update]
#[candid::candid_method(update)]
async fn index() {
    if ic_cdk::caller() != proxy() {
        panic!("Not permitted")
    }
    let current_ts_sec = ic_cdk::api::time() / 1000000;
    let target_canister =
        candid::Principal::from_text(get_target_canister()).expect("invalid principal");
    let px = _get_target_proxy(target_canister).await;
    let call_result = CallProvider::new()
        .call(
            Message::new::<CallCanisterArgs>(call_args(), px.clone(), "proxy_get_last_snapshot")
                .expect("failed to create message"),
        )
        .await
        .expect("failed to call");
    let value = call_result
        .reply::<CallCanisterResponse>()
        .expect("failed to get reply");
    let datum = Snapshot {
        value: value.clone(),
        timestamp: current_ts_sec,
    };
    let _ = add_snapshot(datum.clone());
    ic_cdk::println!("timestamp={}, value={:?}", datum.timestamp, datum.value);
}
#[derive(
    Clone,
    Debug,
    PartialEq,
    candid :: CandidType,
    serde :: Serialize,
    serde :: Deserialize,
    CborSerde,
)]
pub struct UpgradeStableState {
    pub proxy: candid::Principal,
    pub initialized: bool,
    pub env: chainsight_cdk::core::Env,
    pub target_canister: String,
    lens_targets: Vec<String>,
    pub indexing_interval: u32,
}
#[ic_cdk::pre_upgrade]
fn pre_upgrade() {
    ic_cdk::println!("start: pre_upgrade");
    let state = UpgradeStableState {
        proxy: proxy(),
        initialized: is_initialized(),
        env: get_env(),
        target_canister: get_target_canister(),
        lens_targets: get_lens_targets(),
        indexing_interval: get_indexing_interval(),
    };
    let state_bytes = state.to_cbor();
    let len = state_bytes.len() as u32;
    let mut memory = get_upgrades_memory();
    let mut writer = Writer::new(&mut memory, 0);
    writer.write(&len.to_le_bytes()).unwrap();
    writer.write(&state_bytes).unwrap();
    ic_cdk::println!("finish: pre_upgrade");
}
#[ic_cdk::post_upgrade]
fn post_upgrade() {
    ic_cdk::println!("start: post_upgrade");
    let memory = get_upgrades_memory();
    let mut state_len_bytes = [0; 4];
    memory.read(0, &mut state_len_bytes);
    let state_len = u32::from_le_bytes(state_len_bytes) as usize;
    let mut state_bytes = vec![0; state_len];
    memory.read(4, &mut state_bytes);
    let state = UpgradeStableState::from_cbor(&state_bytes);
    set_initialized(state.initialized);
    set_proxy(state.proxy);
    set_env(state.env);
    setup(state.target_canister, state.lens_targets).expect("Failed to `setup` in post_upgrade");
    set_indexing_interval(state.indexing_interval);
    ic_cdk::println!("finish: post_upgrade");
}

