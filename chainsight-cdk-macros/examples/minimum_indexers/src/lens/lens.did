type CanisterMetricsSnapshot = record { cycles : nat; timestamp : nat64 };
type Env = variant { Production; Test; LocalDevelopment };
type InitError = variant {
  InvalidDestination : text;
  InvalidPrincipal : principal;
  InvalidContent : text;
  InvalidRequest : text;
};
type Result = variant { Ok; Err : InitError };
service : {
  get_result : (principal, nat64) -> (nat64) query;
  get_result_proxy : (vec nat8) -> (vec nat8);
  init_in : (Env) -> (Result);
  last_executed : () -> (nat64) query;
  metric : () -> (CanisterMetricsSnapshot) query;
  metrics : (nat64) -> (vec CanisterMetricsSnapshot) query;
  proxy_canister_metrics_snapshots_len : (vec nat8) -> (vec nat8);
  proxy_get_canister_metrics_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_canister_metrics_snapshots : (vec nat8) -> (vec nat8);
  proxy_get_last_canister_metrics_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_top_canister_metrics_snapshots : (vec nat8) -> (vec nat8);
}