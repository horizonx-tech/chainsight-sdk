type CanisterMetricsSnapshot = record { cycles : nat; timestamp : nat64 };
type Env = variant { Production; Test; LocalDevelopment };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type IndexingConfig = record { start_from : nat64; chunk_size : opt nat64 };
type InitError = variant {
  InvalidDestination : text;
  InvalidPrincipal : principal;
  InvalidContent : text;
  InvalidRequest : text;
};
type Result = variant { Ok; Err : InitError };
type Result_1 = variant { Ok; Err : text };
type TransferEvent = record { to : text; value : nat; from : text };
type TransformArgs = record { context : vec nat8; response : HttpResponse };
type Web3CtxParam = record {
  env : Env;
  url : text;
  from : opt text;
  chain_id : nat64;
};
service : {
  canister_type : () -> (text) query;
  event_source : () -> (text) query;
  events_from_to : (nat64, nat64) -> (
      vec record { nat64; vec TransferEvent },
    ) query;
  events_latest_n : (nat64) -> (vec record { nat64; vec TransferEvent }) query;
  get_ethereum_address : (Env) -> (text);
  get_last_indexed : () -> (nat64) query;
  index : () -> ();
  init_in : (Env) -> (Result);
  metric : () -> (CanisterMetricsSnapshot) query;
  metrics : (nat64) -> (vec CanisterMetricsSnapshot) query;
  proxy_call : (vec nat8) -> (vec nat8);
  setup : (text, Web3CtxParam, IndexingConfig) -> (Result_1);
  transform : (TransformArgs) -> (HttpResponse) query;
  transform_get_filter_changes : (TransformArgs) -> (HttpResponse) query;
  transform_send_transaction : (TransformArgs) -> (HttpResponse) query;
}