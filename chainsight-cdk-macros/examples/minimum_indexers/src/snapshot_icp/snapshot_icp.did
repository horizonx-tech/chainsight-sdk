type CanisterMetricsSnapshot = record { cycles : nat; timestamp : nat64 };
type Env = variant { Production; Test; LocalDevelopment };
type InitError = variant {
  InvalidDestination : text;
  InvalidPrincipal : principal;
  InvalidContent : text;
  InvalidRequest : text;
};
type Result = variant { Ok; Err : InitError };
type Result_1 = variant { Ok; Err : text };
type Snapshot = record { value : VirtualPrice; timestamp : nat64 };
type VirtualPrice = record { value : text; timestamp : nat64 };
service : {
  get_last_snapshot : () -> (Snapshot) query;
  get_snapshot : (nat64) -> (Snapshot) query;
  get_snapshots : () -> (vec Snapshot) query;
  get_top_snapshots : (nat64) -> (vec Snapshot) query;
  init_in : (Env) -> (Result);
  last_executed : () -> (nat64) query;
  metric : () -> (CanisterMetricsSnapshot) query;
  metrics : (nat64) -> (vec CanisterMetricsSnapshot) query;
  proxy_canister_metrics_snapshots_len : (vec nat8) -> (vec nat8);
  proxy_get_canister_metrics_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_canister_metrics_snapshots : (vec nat8) -> (vec nat8);
  proxy_get_last_canister_metrics_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_last_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_snapshots : (vec nat8) -> (vec nat8);
  proxy_get_top_canister_metrics_snapshots : (vec nat8) -> (vec nat8);
  proxy_get_top_snapshots : (vec nat8) -> (vec nat8);
  proxy_snapshots_len : (vec nat8) -> (vec nat8);
  setup : (text) -> (Result_1);
  snapshots_len : () -> (nat64) query;
}